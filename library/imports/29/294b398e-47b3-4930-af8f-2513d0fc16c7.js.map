{"version":3,"sources":["..\\..\\..\\..\\assets\\script/assets\\script\\Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","type","AudioClip","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onDestroy","systemEvent","off","SystemEvent","EventType","KEY_DOWN","KEY_UP","start","onLoad","jumpAction","node","runAction","xSpeed","on","update","dt","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    setJumpAction: function () {\r\n        // 跳跃上升\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        // 下落\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n    //键盘按下\r\n    onKeyDown (event) {\r\n        // set a flag when key pressed\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n    //键盘抬起\r\n    onKeyUp (event) {\r\n        // unset a flag when key released\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n    onDestroy () {\r\n        // 取消键盘输入监听\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n    onLoad: function () {\r\n        // 初始化跳跃动作\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);   \r\n    },\r\n\r\n    update (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n});\r\n"]}